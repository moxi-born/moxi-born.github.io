<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moxib</title>
  
  
  <link href="https://moxib.site/atom.xml" rel="self"/>
  
  <link href="https://moxib.site/"/>
  <updated>2023-07-23T05:29:50.977Z</updated>
  <id>https://moxib.site/</id>
  
  <author>
    <name>Moxib</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vertx高级指南（二）</title>
    <link href="https://moxib.site/2023/07/23/vertx%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://moxib.site/2023/07/23/vertx%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-07-23T05:28:30.000Z</published>
    <updated>2023-07-23T05:29:50.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集成Netty"><a href="#集成Netty" class="headerlink" title="集成Netty"></a>集成Netty</h2><p>Netty是Vert.x的依赖之一。事实上，Netty给予了Vert.x网络服务的能力，你可以使用Vert.x Core编写以下类型的基本网络服务：</p><ul><li>TCP</li><li>HTTP</li><li>UDP</li><li>DNS</li></ul><p>它们是基于 Netty 的各种组件构建的。 Netty 社区已经实现了广泛的组件，本章解释了如何在 Vert.x 中集成这些组件。</p><p>在本章中，我们将构建一个 <a href="https://tools.ietf.org/html/rfc868">TIME</a> 协议客户端和服务器。 Netty 文档提供了这个简单协议的客户端&#x2F;服务器实现，我们将重点关注这些组件的集成。</p><h3 id="Netty集成点"><a href="#Netty集成点" class="headerlink" title="Netty集成点"></a>Netty集成点</h3><p>本章的主要目的是解释 Vert.x 的一些内部接口，此类接口是暴露与 Netty 交互的底层方法的扩展，这些方法对于直接重用 Netty 的组件非常有用。</p><blockquote><p>大多数用户不需要处理这些扩展，因此这些方法被隔离在扩展接口中</p></blockquote><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p><code>ContextInternal</code> 继承了 <code>io.vertx.core.Context</code> 并暴露了一些 Netty 集成点，比如 <code>VertxInternal</code>。</p><p>通常情况下，上下文是从 <code>Vertx#getOrCreateContext()</code> 方法获取的，该方法返回当前执行上下文，或者在必要时创建一个新的上下文：在 Verticle 中调用时，<code>getOrCreateContext() </code> 返回此 Verticle 的上下文，当在主线程或单元测试等非 Vert.x 线程中使用时，它会创建一个新上下文并返回它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> vertx.getOrCreateContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强转借此访问额外的方法</span></span><br><span class="line"><span class="type">Internals</span> <span class="variable">contextInternal</span> <span class="operator">=</span> (Internals) context;</span><br></pre></td></tr></table></figure><p>上下文始终与 Netty 事件循环（event loop）相关联，因此使用此上下文可确保我们的组件重复使用相同的事件循环（如果之前存在）或使用新的事件循环。</p><p><code>ContextInternal#nettyEventLoop()</code> 方法返回这个特定的事件循环，我们可以在 Bootstrap（对于客户端）或 ServerBoostrap（对于服务器）上使用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ContextInternal</span> <span class="variable">contextInt</span> <span class="operator">=</span> (ContextInternal) context; <span class="comment">// 1</span></span><br><span class="line"><span class="type">EventLoop</span> <span class="variable">eventLoop</span> <span class="operator">=</span> contextInt.nettyEventLoop();</span><br><span class="line"></span><br><span class="line"><span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>(); <span class="comment">// 2</span></span><br><span class="line">bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">bootstrap.group(eventLoop);</span><br></pre></td></tr></table></figure><ul><li>获取这个上下文关联的event loop</li><li>创建客户端的Bootstrap</li></ul><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><p><code>VertxInternal</code> 扩展了 <code>io.vertx.core.Vertx</code>，其中 <code>VertxInternal#getAcceptorEventLoopGroup()</code> 返回一个 <code>EventLoopGroup</code>用于接受服务器上的连接，它的常见用法是在 ServerBootstrap 上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ContextInternal</span> <span class="variable">contextInt</span> <span class="operator">=</span> (ContextInternal) context; <span class="comment">// 1</span></span><br><span class="line"><span class="type">EventLoop</span> <span class="variable">eventLoop</span> <span class="operator">=</span> contextInt.nettyEventLoop();</span><br><span class="line"></span><br><span class="line"><span class="type">VertxInternal</span> <span class="variable">vertxInt</span> <span class="operator">=</span> contextInt.owner(); <span class="comment">// 2</span></span><br><span class="line"><span class="type">EventLoopGroup</span> <span class="variable">acceptorGroup</span> <span class="operator">=</span> vertxInt.getAcceptorEventLoopGroup();</span><br><span class="line"></span><br><span class="line"><span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>(); <span class="comment">// 3 </span></span><br><span class="line">bootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">bootstrap.group(acceptorGroup, eventLoop);</span><br></pre></td></tr></table></figure><ul><li>获取这个上下文关联的event loop</li><li>获取这个Vertx的Acceptor event loop组</li><li>创建服务端的Bootstrap</li></ul><h4 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h4><p>现在我们对<code>ContextInternal</code>更熟悉了，让我们看看如何使用它来处理Netty事件，如网络事件、channel生命周期等…</p><p><code> ContextInternal#emit</code> 方法用于向应用程序发出事件，它确保了： </p><ul><li>上下文并发性：重复利用当前的event-loop线程或者在worker线程执行</li><li>当前上下文与调度线程的thread local关联 </li><li>任何抛出的未捕获异常都会在上下文中报告，这样的异常要么被记录，要么被传递给<code>context#exceptionHandler</code></li></ul><p>如下展示了一个简短的服务启动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Handler&lt;Channel&gt; bindHandler = ch -&gt; &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> &#123;</span><br><span class="line">    context.emit(ch, bindHandler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise&lt;Void&gt; bindPromise = context.promise();</span><br><span class="line"></span><br><span class="line">bootstrap.bind(socketAddress).addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">      <span class="comment">// 通知应用绑定成功</span></span><br><span class="line">      bindPromise.complete();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 通知应用绑定失败</span></span><br><span class="line">      bindPromise.fail(future.cause());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bindPromise.future();</span><br></pre></td></tr></table></figure><p><code>emit</code>的典型用法是将一个或多个事件下发到同一个处理程序，就像事件处理程序一样。<br>当涉及到<code>future</code>时，<code>ContextInternal#promise</code>方法会创建一个<code>promise</code>，这个<code>promise</code>会像<code>emit</code>一样对监听器执行操作。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>你可以在<a href="https://netty.io/wiki/user-guide-for-4.x.html#wiki-h3-9">这里</a>找到原始的服务器代码实例。</p><p>本文示例的Vert.x TIME服务代码暴露了一个简单的接口：</p><ul><li>一个创建<code>TimeServer</code>的静态方法</li><li>两个方法：通过<code>listen</code> 绑定服务，通过 <code>close</code> 解绑服务</li><li><code>requestHandler</code>用于设置处理请求的处理器handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeServer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回一个时间服务</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> TimeServer <span class="title function_">create</span><span class="params">(Vertx vertx)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TimeServerImpl</span>(vertx);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置发生时间请求时要调用的handler. 这个handler应该完成包含时间的future</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> handler the handler to be called</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> this object</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  TimeServer <span class="title function_">requestHandler</span><span class="params">(Handler&lt;Promise&lt;Long&gt;&gt; handler)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 启动并绑定时间server.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> port the server port</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> host the server host</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the future completed when the socket is bound</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Future&lt;Void&gt; <span class="title function_">listen</span><span class="params">(<span class="type">int</span> port, String host)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 关闭时间server.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现一个返回当前JVM时间的TIME服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Vertx</span> <span class="variable">vertx</span> <span class="operator">=</span> Vertx.vertx();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建时间server</span></span><br><span class="line"><span class="type">TimeServer</span> <span class="variable">server</span> <span class="operator">=</span> TimeServer.create(vertx);</span><br><span class="line">server.requestHandler(time -&gt; &#123;</span><br><span class="line">  time.complete(System.currentTimeMillis());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">server.listen(<span class="number">8037</span>, <span class="string">&quot;0.0.0.0&quot;</span>)</span><br><span class="line">    .onSuccess(v -&gt; System.out.println(<span class="string">&quot;Server started&quot;</span>))</span><br><span class="line">    .onFailure(err -&gt; err.printStackTrace());</span><br></pre></td></tr></table></figure><p> 现在让我们研究一下服务器的实现。 </p><h3 id="服务端的bootstrap"><a href="#服务端的bootstrap" class="headerlink" title="服务端的bootstrap"></a>服务端的bootstrap</h3><p>首先让我们看一下ServerBootstrap的创建和配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EventLoopGroup</span> <span class="variable">acceptorGroup</span> <span class="operator">=</span> vertx.getAcceptorEventLoopGroup(); <span class="comment">// 1</span></span><br><span class="line"><span class="type">EventLoop</span> <span class="variable">eventLoop</span> <span class="operator">=</span> context.nettyEventLoop(); <span class="comment">// 2</span></span><br><span class="line">bootstrap = <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>(); <span class="comment">// 3</span></span><br><span class="line">bootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">bootstrap.group(acceptorGroup, eventLoop);</span><br><span class="line">bootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline(); <span class="comment">// 4</span></span><br><span class="line">    <span class="type">TimeServerHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimeServerHandler</span>(context, requestHandler);</span><br><span class="line">    pipeline.addLast(handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>VertxInternal</code>返回event loop组当作Acceptor组（Boss接受请求）</li><li><code>ContextInternal</code> 返回 event loop组用child组（worker处理请求）</li><li>创建并配置Netty的<code>ServerBootstrap</code></li><li>使用<code>requestHandler</code>初始化<code>TimeServerHandler</code>并通过<code>TimeServerHandler</code>配置<code>channel</code></li></ol><p>ServerBootstrap的创建非常简单，与直接使用Netty的版本非常相似，主要的区别在于，我们复用了Verticle和Vert.x提供的事件循环event loop，这确保了我们的服务器共享应用程序的资源（这里指event loop）。</p><p>这里要注意，<code>TimeServerHandler</code>是用服务器的<code>requestHandler</code>初始化的，这个handler将在提供TIME请求时使用。</p><h3 id="服务绑定"><a href="#服务绑定" class="headerlink" title="服务绑定"></a>服务绑定</h3><p>现在让我们来看一下绑定操作，它与直接使用Netty的原始版本示例有很多不同但区别也不是特别大：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Promise&lt;Void&gt; promise = context.promise(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">ChannelFuture</span> <span class="variable">bindFuture</span> <span class="operator">=</span> bootstrap.bind(host, port);</span><br><span class="line">bindFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> &#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">      channel = future.channel();</span><br><span class="line">      promise.complete();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      promise.fail(future.cause());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> promise.future(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol><li>创建一个绑定这个Server上下文的promise</li><li>将结果promise设置为完成或者成功（代码中应为完成或者失败）</li><li>返回future结果</li></ol><p> 此处最重要的部分是创建上下文promise，用于让应用程序知道绑定结果。 </p><h3 id="服务handler"><a href="#服务handler" class="headerlink" title="服务handler"></a>服务handler</h3><p>现在，让我们用<code>TimeServerHandler</code>来完成我们的服务器，它改写自Netty原始版本<code>TimeServerHandler</code>： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Promise&lt;Long&gt; result = Promise.promise(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">context.emit(result, requestHandler); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">result.future().onComplete(ar -&gt; &#123; <span class="comment">//3</span></span><br><span class="line">  <span class="keyword">if</span> (ar.succeeded()) &#123;  <span class="comment">// 4</span></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">time</span> <span class="operator">=</span> ctx.alloc().buffer(<span class="number">4</span>);</span><br><span class="line">    time.writeInt((<span class="type">int</span>) (ar.result() / <span class="number">1000L</span> + <span class="number">2208988800L</span>));</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> ctx.writeAndFlush(time);</span><br><span class="line">    f.addListener((ChannelFutureListener) channelFuture -&gt; ctx.close());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 5</span></span><br><span class="line">    ctx.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>创建一个将由<code>requestHandler</code>解析的空promise </li><li>让上下文使用emit将事件发送给<code>requestHandler</code></li><li>当<code>requestHandler</code>的实现完成相关的promise时，调用future的处理程序 </li><li>将当前时间写入channel，然后关闭</li><li>如果应用程序失败，只需关闭socket套接字</li></ol><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>你可以在<a href="https://netty.io/wiki/user-guide-for-4.x.html#wiki-h3-10">这里</a>找到原始的客户端代码实例。</p><p>本文示例的Vert.x TIME客户端暴露了一个简单的接口：</p><ul><li>一个创建<code>TimeClient</code>的静态方法</li><li>客户端从服务端获取时间的<code>getTime</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeClient</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回一个time客户端</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> TimeClient <span class="title function_">create</span><span class="params">(Vertx vertx)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TimeClientImpl</span>(vertx);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 从服务器获取当前时间</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> port the server port</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> host the server host name</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the result future</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Future&lt;Long&gt; <span class="title function_">getTime</span><span class="params">(<span class="type">int</span> port, String host)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> TIME客户端使用起来很简单： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Vertx</span> <span class="variable">vertx</span> <span class="operator">=</span> Vertx.vertx();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建time client</span></span><br><span class="line"><span class="type">TimeClient</span> <span class="variable">server</span> <span class="operator">=</span> TimeClient.create(vertx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取时间</span></span><br><span class="line">server.getTime(<span class="number">8037</span>, <span class="string">&quot;localhost&quot;</span>).onComplete(ar -&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ar.succeeded()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Time is &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(ar.result()));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ar.cause().printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在让我们研究下客户端的实现。</p><h3 id="客户端的bootstrap"><a href="#客户端的bootstrap" class="headerlink" title="客户端的bootstrap"></a>客户端的bootstrap</h3><p>首先让我们砍下客户端<code>Bootstrap</code>的创建和配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EventLoop</span> <span class="variable">eventLoop</span> <span class="operator">=</span> context.nettyEventLoop();  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并配置 Netty bootstrap</span></span><br><span class="line"><span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>(); <span class="comment">// 2</span></span><br><span class="line">bootstrap.group(eventLoop);</span><br><span class="line">bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">bootstrap.option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>);</span><br><span class="line">bootstrap.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel ch)</span> &#123;</span><br><span class="line">    <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline(); <span class="comment">// 3</span></span><br><span class="line">    pipeline.addLast(<span class="keyword">new</span> <span class="title class_">TimeClientHandler</span>(result));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bootstrap;</span><br></pre></td></tr></table></figure><ol><li><code>VertxInternal</code>返回event loop用作child组（用于接受请求）</li><li>创建并配置 Netty bootstrap</li><li>通过返回结果处理器<code>resultHandler</code>（这里是个promise）初始化<code>TimeClientHandler</code>，然后配置channel</li></ol><p>Bootstrap的创建非常简单，与Netty原始版本非常相似，主要区别在于我们使用了Verticle提供的event loop事件循环，这确保了我们的客户复用与Verticel相同的event loop。</p><p>就像在服务器部分的示例中一样，我们使用<code>ContextInternal</code>来获取要在<code>Bootstrap</code>上设置的Netty的<code>EventLoop</code>。</p><p>需要注意的是，<code>TimeClientHandler</code>是用客户端<code>resultHandler</code>初始化的，这个处理程序将用TIME请求结果调用。  </p><h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p>BootStrap程序的设置与原始的示例非常相似，在失败的情况下，应用程序将使用一个包含整体结果的promise作为回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ChannelFuture</span> <span class="variable">connectFuture</span> <span class="operator">=</span> bootstrap.connect(host, port); <span class="comment">// 1</span></span><br><span class="line">connectFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">      result.fail(future.cause()); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>连接到服务器</li><li>一旦连接失败，将promise置为失败</li></ol><h3 id="客户端handler"><a href="#客户端handler" class="headerlink" title="客户端handler"></a>客户端handler</h3><p>现在，让我们用<code>TimeClientHandler</code>来完成我们的客户端，它是对Netty原始版本<code>TimeClientHandler</code>的改写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuf</span> <span class="variable">m</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line"><span class="type">long</span> currentTimeMillis;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  currentTimeMillis = (m.readUnsignedInt() - <span class="number">2208988800L</span>) * <span class="number">1000L</span>; <span class="comment">// 1</span></span><br><span class="line">  resultPromise.complete(currentTimeMillis);  <span class="comment">// 2</span></span><br><span class="line">  resultPromise = <span class="literal">null</span>; <span class="comment">// 3</span></span><br><span class="line">  ctx.close(); <span class="comment">// 4</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  m.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>解码从服务器返回的时间</li><li>使用response将<code>resultPromise</code>置为完成</li><li>将<code>resultPromise</code>设置为null</li><li>关闭channel</li></ol><p> 这里重复说明下，当TIME响应事件发生时，我们将<code>resultPromise</code>设置为完成。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集成Netty&quot;&gt;&lt;a href=&quot;#集成Netty&quot; class=&quot;headerlink&quot; title=&quot;集成Netty&quot;&gt;&lt;/a&gt;集成Netty&lt;/h2&gt;&lt;p&gt;Netty是Vert.x的依赖之一。事实上，Netty给予了Vert.x网络服务的能力，你可以使用V</summary>
      
    
    
    
    
    <category term="vertx" scheme="https://moxib.site/tags/vertx/"/>
    
  </entry>
  
  <entry>
    <title>vertx高级指南（一）</title>
    <link href="https://moxib.site/2023/07/22/vertx%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://moxib.site/2023/07/22/vertx%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-07-22T02:09:31.000Z</published>
    <updated>2023-07-22T04:35:20.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文译自Julien Viet的<a href="https://vert-x3.github.io/advanced-vertx-guide/index.html">Advanced Vert.x Guide</a></p></blockquote><p>本文旨在解释和讨论以下内容 </p><ul><li>Vert.x的设计</li><li>内部API</li><li>与Netty集成</li></ul><p>当你阅读本指南时你将：</p><ul><li>更深入了解Vert.x</li><li>了解如何将Vert.x与其他第三方库集成</li><li>了解如何使用Netty和Vertx.x编写网络应用</li></ul><p>这是一个实时指南，你可以做出贡献，只需<a href="https://github.com/vert-x3/advanced-vertx-guide">提交PR或者提issuus</a></p><blockquote><p>本指南中公开了一些内部Vert.x API，但谨记，这些API可能会在需要时进行更改。</p></blockquote><h2 id="Vert-x中的上下文"><a href="#Vert-x中的上下文" class="headerlink" title="Vert.x中的上下文"></a>Vert.x中的上下文</h2><p><code>io.vertx.core.Context</code>接口是Vert.x的一个重要组件。 </p><p>上下文(Context)可以被认为是应用程序如何执行事件（或者handler创建的任务）。</p><p>绝大部分的事件是通过上下文（Context）下发的， 当应用程序消费事件时，往往存在与事件调度相关联的上下文。 </p><h3 id="Verticle上下文"><a href="#Verticle上下文" class="headerlink" title="Verticle上下文"></a>Verticle上下文</h3><p>部署verticle的实例时，Vert.x会创建一个上下文并将其与该实例关联。你可以通过<code>AbstractVerticle</code>的<code>context</code>字段在verticle中访问此上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyVerticle</span> <span class="keyword">extends</span> <span class="title class_">AbstractVerticle</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">JsonObject</span> <span class="variable">config</span> <span class="operator">=</span> context.config();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>MyVerticle</code>部署后，Vert.x 发送一个 <em>start</em> 事件, Verticle上下文调用<code>start</code> 方法:</p><ul><li><p>默认情况下，上下文始终是事件循环（event-loop）上下文，调用线程是事件循环 （event loop）</p></li><li><p>当vertile部署为worker时，调用线程是Vert.x的worker池之一</p></li></ul><h3 id="上下文（Context）的特殊之处"><a href="#上下文（Context）的特殊之处" class="headerlink" title="上下文（Context）的特殊之处"></a>上下文（Context）的特殊之处</h3><p>从 Vert.x 3开始支持不通过Verticle使用Vert.x的API，这引出了一个有意思的问题：到底使用哪个上下文（Context）？</p><p>当一个Vert.x的API被调用，Vert.x关联当前线程到一个特殊的event-loop context，<code>Vertx#getOrCreateContext()</code>在第一次被非Vertx线程调用时创建上下文，然后在随后的调用中返回此上下文。</p><p> 因此，异步Vert.x API上的回调在同一上下文中发生： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.create(vertx);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">4</span>;i++) &#123;</span><br><span class="line">     client</span><br><span class="line">       .get(<span class="number">8080</span>, <span class="string">&quot;myserver.mycompany.com&quot;</span>, <span class="string">&quot;/some-uri&quot;</span>)</span><br><span class="line">       .send()</span><br><span class="line">       .onSuccess(ar -&gt; &#123;</span><br><span class="line">        <span class="comment">// 所有的回调在同一个上下文</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上下文（Context）的传递"><a href="#上下文（Context）的传递" class="headerlink" title="上下文（Context）的传递"></a>上下文（Context）的传递</h3><p>大多数Vert.x API都包含上下文的存在（原文aware of明白上下文的存在）。</p><p>在上下文中执行的异步操作将调用具有相同上下文的应用程序。</p><p>同样，事件处理程序也在同一上下文上调度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyVerticle</span> <span class="keyword">extends</span> <span class="title class_">AbstractVerticle</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">   Future&lt;HttpServer&gt; future = vertx.createHttpServer()</span><br><span class="line">     .requestHandler(request -&gt; &#123;</span><br><span class="line">       <span class="comment">// 在verticle上下文中执行</span></span><br><span class="line">     &#125;)</span><br><span class="line">     .listen(<span class="number">8080</span>, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"></span><br><span class="line">   future.onComplete(ar -&gt; &#123;</span><br><span class="line">      <span class="comment">// 在verticle上下文中执行</span></span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理上下文（Context）"><a href="#处理上下文（Context）" class="headerlink" title="处理上下文（Context）"></a>处理上下文（Context）</h3><p>大多数应用程序不需要与上下文进行紧密的交互，但有时访问它们会很有用，例如，你的应用程序使用另一个库，该库在自己的线程上执行回调，并且你希望在原始上下文中执行代码。</p><p>上文我们看到，verticle可以通过<code>context</code>字段访问其上下文，但这意味着使用verticle并在verticle上有一个引用可能并不总是方便的。</p><p>你可以通过 <code>getOrCreateContext()</code>获取当前上下文:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> vertx.getOrCreateContext();</span><br></pre></td></tr></table></figure><p>你也可以使用静态方法<code>Vertx.currentContext()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> Vertx.currentContext();</span><br></pre></td></tr></table></figure><p>如果当前线程没有与上下文关联，则后者可能返回null，而前者将在需要时创建一个上下文，因此永远不会返回null。</p><p>在获取了上下文之后，你可以在这个上下文中执行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">integrateWithExternalSystem</span><span class="params">(Handler&lt;Event&gt; handler)</span> &#123;</span><br><span class="line"> <span class="comment">// 捕获当前上下文</span></span><br><span class="line"> <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> vertx.getOrCreateContext();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 在应用上下文上执行事件处理器</span></span><br><span class="line"> externalSystem.onEvent(event -&gt; &#123;</span><br><span class="line">   context.runOnContext(v -&gt; handler.handle(event));</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实践中，很多Vert.x的API和第三方库就是这样实现的。</p><h3 id="事件循环上下文（Event-loop-context）"><a href="#事件循环上下文（Event-loop-context）" class="headerlink" title="事件循环上下文（Event-loop context）"></a>事件循环上下文（Event-loop context）</h3><p> 事件循环上下文使用事件循环（Event-loop）来运行代码：处理程序直接在IO线程上执行，因此： </p><ul><li>处理程序将始终使用同一个线程执行 </li><li>处理程序决不能阻塞线程，否则它将会导致该事件循环关联的所有IO任务阻塞（原文是starvation）</li></ul><p> 这种行为通过保证关联的处理程序总是在同一个线程上执行，从而消除了同步和其他锁机制的需要，从而大大简化了线程模型。 </p><p> 事件循环上下文是默认和最常用的上下文类型，在没有worker标志的情况下部署的verticle将始终使用事件循环上下文进行部署。 </p><h3 id="Worker上下文（Worker-context）"><a href="#Worker上下文（Worker-context）" class="headerlink" title="Worker上下文（Worker context）"></a>Worker上下文（Worker context）</h3><p>Worker上下文被分配给在启用worker选项的情况下部署的verticle上。Worker上下文与标准事件循环上下文的区别在于，工作线程在单独的工作线程池上执行。</p><p>这种与事件循环线程的分离允许Worker上下文执行阻塞事件循环的阻塞操作类型：阻塞这样的线程除了阻塞一个线程之外不会影响应用程序。</p><p>正如事件循环上下文一样，Worker上下文确保处理程序在任何给定时间只在一个线程上执行，也就是说，Worker作上下文上执行的处理程序将始终按顺序执行，一个接一个，但不同的操作可能在不同的线程上执行。</p><h3 id="上下文异常处理器"><a href="#上下文异常处理器" class="headerlink" title="上下文异常处理器"></a>上下文异常处理器</h3><p>你可以在上下文上设置异常处理程序，用以捕获在上下文上运行的任务引发的任何未检查的异常，如果未设置异常处理程序，则默认改为调用<code>Vertx</code>异常处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.exceptionHandler(throwable -&gt; &#123;</span><br><span class="line"> <span class="comment">// 任何通过上下文抛出的异常</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vertx.exceptionHandler(throwable -&gt; &#123;</span><br><span class="line"> <span class="comment">// 任何上下文抛出的未捕获异常</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果未设置任何处理程序，则异常将作为错误记录，并显示消息_Unhanded exception_你可以使用<code>reportException报告上下文中的异常</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.reportException(<span class="keyword">new</span> <span class="title class_">Exception</span>());</span><br></pre></td></tr></table></figure><h3 id="发射事件"><a href="#发射事件" class="headerlink" title="发射事件"></a>发射事件</h3><p> <code>runOnContext</code>是在上下文上执行一段代码的最常见方式，尽管它非常适合将外部库与Vert.x集成，但它并不总是最适合将在事件循环级别执行的代码（如Netty事件）与应用程序代码集成。  </p><p> Vert.x有一些内部方法可以根据情况实现类似的行为 :</p><ul><li><p><code>ContextInternal#dispatch(E, Handler&lt;E&gt;)</code></p></li><li><p><code>ContextInternal#execute(E, Handler&lt;E&gt;)</code></p></li><li><p><code>ContextInternal#emit(E, Handler&lt;E&gt;)</code></p></li></ul><h4 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a>Dispatch</h4><p> <code>dispatch</code>假定调用线程是上下文线程，它将当前执行线程与上下文关联起来： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assertNull(Vertx.currentContext());</span><br><span class="line">context.dispatch(event, evt -&gt; &#123;</span><br><span class="line"> assertSame(context, Vertx.currentContext());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 该处理器也被阻塞线程检查器检测。</p><p> 最后，处理程序抛出的任何异常都会报告给上下文： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.exceptionHandler(err -&gt; &#123;</span><br><span class="line"> <span class="comment">// 将会接收到下面抛出的异常</span></span><br><span class="line">&#125;);</span><br><span class="line">context.dispatch(event, evt -&gt; &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h4><p><code>execute </code>在上下文上执行任务，当调用线程已经是上下文线程时，直接执行任务，否则安排此任务计划执行（实际是提交给背后的event-loop执行，补充源码如下）。</p><blockquote><p>没有上下文关联也可以。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ContextInternal ctx, Runnable task)</span> &#123;</span><br><span class="line">    <span class="type">EventLoop</span> <span class="variable">eventLoop</span> <span class="operator">=</span> nettyEventLoop();</span><br><span class="line">    <span class="keyword">if</span> (eventLoop.inEventLoop()) &#123;<span class="comment">// 如果是上下文线程，直接执行</span></span><br><span class="line">      task.run();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      eventLoop.execute(task);<span class="comment">// 否则提交到eventloop中执行</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="Emit"><a href="#Emit" class="headerlink" title="Emit"></a>Emit</h4><p><code>emit</code> 是 <code>execute</code> 和 <code>dispatch的</code>组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">emit</span><span class="params">(E event, Handler&lt;E&gt; eventHandler)</span> &#123;</span><br><span class="line"> execute(v -&gt; dispatch(argument, task));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>emit</code> 可以用于从任何线程上发射事件到处理器上:</p><ul><li>在任何线程中，它的行为都类似于<code>runOnContext</code> </li><li>如果是上下文线程，它通过上下文中的本地线程关联关系、阻塞线程检查器运行事件处理器，并报告上下文上的失败</li></ul><p> 在大多数情况下，<code>emit</code>方法是让应用程序处理事件的方法,<code>dispatch</code>和<code>execute</code>方法的主要目的是赋予代码更多的控制权，以实现非常具体的事情。 </p><h4 id="上下文感知的futures"><a href="#上下文感知的futures" class="headerlink" title="上下文感知的futures"></a>上下文感知的futures</h4><p>在 Vert.x 4 之前，Future 都是静态创建的对象，与上下文没有特定关系。 Vert.x 4 提供了一个基于 future 的 API，它遵循了与 Vert.x 3 相同的语义：future 上的任何回调都应该可预测地在相同的上下文上运行。</p><p>Vert.x 4 的API 创建绑定到调用者上下文的 future，在上下文上运行回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise&lt;String&gt; promise = context.promise();</span><br><span class="line"></span><br><span class="line">Future&lt;String&gt; future = promise.future();</span><br><span class="line"></span><br><span class="line">future.onSuccess(handler);</span><br></pre></td></tr></table></figure><p>任何回调都会在创建 Promise 的上下文中发出，上面的代码大概率会长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise&lt;String&gt; promise = Promise.promise();</span><br><span class="line"></span><br><span class="line">Future&lt;String&gt; future = promise.future();</span><br><span class="line"></span><br><span class="line">future.onSuccess(result -&gt; context.emit(result, handler));</span><br></pre></td></tr></table></figure><p>此外，该 API 允许创建成功和失败的 future：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;String&gt; succeeded = context.succeededFuture(<span class="string">&quot;OK usa&quot;</span>);</span><br><span class="line">Future&lt;String&gt; failed = context.failedFuture(<span class="string">&quot;Oh sorry&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="上下文追踪（Contexts-and-tracing）"><a href="#上下文追踪（Contexts-and-tracing）" class="headerlink" title="上下文追踪（Contexts and tracing）"></a>上下文追踪（Contexts and tracing）</h3><p>从 Vert.x 4 开始，Vert.x 集成了流行的分布式跟踪系统。</p><p>追踪库通常依赖于<a href="https://en.wikipedia.org/wiki/Thread-local_storage">thread local</a>来传播跟踪数据，例如，处理 HTTP 请求时收到的跟踪信息应该在整个 HTTP 客户端中传播。Vert.x 以类似的方式集成追踪，但依赖于上下文而不是thread local,上下文由 Vert.x API 传播，因此为实现追踪提供了可靠的存储。</p><p>由于给定服务器处理的所有HTTP请求都使用创建HTTP服务器的相同上下文，因此服务器上下文对于每个HTTP请求，是 <em>duplicated</em> _（重复的）_，以授予每个HTTP请求的唯一性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyVerticle</span> <span class="keyword">extends</span> <span class="title class_">AbstractVerticle</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">   vertx.createHttpServer()</span><br><span class="line">     .requestHandler(request -&gt; &#123;</span><br><span class="line">       <span class="comment">// Executed in a duplicate verticle context</span></span><br><span class="line">     &#125;)</span><br><span class="line">     .listen(<span class="number">8080</span>, <span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种重复（复制）操作共享原始上下文的大部分特性并提供特定的本地存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vertx.createHttpServer()</span><br><span class="line"> .requestHandler(request -&gt; &#123;</span><br><span class="line">   <span class="type">JsonObject</span> <span class="variable">specificRequestData</span> <span class="operator">=</span> getRequestData(request);</span><br><span class="line">   <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> vertx.getOrCreateContext();</span><br><span class="line">   context.putLocal(<span class="string">&quot;my-stuff&quot;</span>, specificRequestData);</span><br><span class="line">   processRequest(request);</span><br><span class="line"> &#125;)</span><br><span class="line"> .listen(<span class="number">8080</span>, <span class="string">&quot;localhost&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后应用就可以使用它了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> vertx.getOrCreateContext();</span><br><span class="line"><span class="type">JsonObject</span> <span class="variable">specificRequestData</span> <span class="operator">=</span> context.getLocal(<span class="string">&quot;my-stuff&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>ContextInternal#duplicate() </code>复制当前上下文，它可用于确定追踪行动的范围</p><h3 id="关闭钩子函数（Close-hooks）"><a href="#关闭钩子函数（Close-hooks）" class="headerlink" title="关闭钩子函数（Close hooks）"></a>关闭钩子函数（Close hooks）</h3><p>Close hooks 是 Vert.x 的一项内部功能，在 Verticle 或 Vertx 实例关闭时可通知到组件， 它可用于实现 verticle 中的自动清理功能，例如 Vert.x HTTP 服务器。</p><p> <code>io.vertx.core.Closeable</code> 接口及其 <code>close(Promise&lt;Void&gt; closePromise) </code>方法定义了接收关闭通知的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Promise&lt;Void&gt; completion)</span> &#123;</span><br><span class="line"> <span class="comment">// Do cleanup, the method will complete the future</span></span><br><span class="line">  doClose(completion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ContextInternal#addCloseHook</code>注册了一个<code>Closeable</code>的实例用于通知上下文什么时候关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.addCloseHook(closeable);</span><br></pre></td></tr></table></figure><p>当 Verticle 实例停止时，Verticle 部署创建的上下文会调用该钩子。否则，当 Vertx 实例关闭时会调用该钩子。</p><p><code>Context#removeCloseHook</code> 取消注册关闭钩子，并会在调用关闭钩子函数之前资源即将关闭时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.removeCloseHook(closeable);</span><br></pre></td></tr></table></figure><p>钩子函数为避免泄漏是用弱引用实现的，但是不论如何你也应该取消注册钩子。</p><p>在重复上下文上添加钩子，会将钩子添加到原始上下文。</p><p>同样，<code>VertxInternal</code> 也暴露了相同的方法来在 Vertx 实例关闭时接收通知。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注：本文译自Julien Viet的&lt;a href=&quot;https://vert-x3.github.io/advanced-vertx-guide/index.html&quot;&gt;Advanced Vert.x Guide&lt;/a&gt;&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    
    <category term="vert.x" scheme="https://moxib.site/tags/vert-x/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://moxib.site/2023/07/09/hello-world/"/>
    <id>https://moxib.site/2023/07/09/hello-world/</id>
    <published>2023-07-09T14:45:05.211Z</published>
    <updated>2023-07-16T03:19:01.563Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
